// buildscript는 Gradle이 특정 task를 실행할 때 사용하는 설정으로 Querydsl의 버전을 지정합니다.
//buildscript 블록은 Gradle 빌드 스크립트 자체를 빌드하는 데 사용되는 설정을 정의하는 블록입니다. buildscript 블록 내에서는 Gradle 플러그인 및 외부 종속성을 설정하고 관리할 수 있습니다.
//ext는 Gradle 프로젝트에서 사용할 수 있는 추가 속성을 정의하는 데 사용되는 블록입니다. ext 블록 내에서 정의된 속성은 프로젝트의 다른 위치에서 참조할 수 있으며, 주로 버전 번호나 설정 값과 같은 중복되는 정보를 단일 위치에서 관리하는 데 사용
//일반적으로 buildscript 블록은 Gradle 플러그인의 종속성을 정의하고, ext 블록은 프로젝트에서 사용할 변수나 설정 값을 정의
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
//    책에서 제시한 버전과 다름. boot 버전 3이 넘어가면 jakarta.
    //org.springframework.boot' 플러그인은 Spring Boot 애플리케이션을 빌드하고 실행하는 데 필요한 기능을 제공
    //io.spring.dependency-management' 플러그인은 Spring 프로젝트의 의존성 관리를 간편하게 해주는 기능을 제공
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

//group = 'org.boot'
//version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '11'
group = 'com.boot'
version = '0.0.1-SNAPSHOT'

// 프로젝트의 Java 소스 코드의 버전
//java {
//    sourceCompatibility = '17'
//}
sourceCompatibility = '11'

//configurations 블록에서는 필요한 의존성을 정의
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

//repositories 블록은 프로젝트에서 의존성을 가져올 Maven 저장소를 정의합니다. 여기서는 Maven 중앙 저장소만 사용하도록 설정
repositories {
    mavenCentral()
}

dependencies {

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //Spring-Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    //thymeleaf layout
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    //devTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //Querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"   //Querydsl의 JPA 모듈을 식별하고 사용

    annotationProcessor(
//  javax.persistence-api는 JPA(Java Persistence API)의 API를 제공하는 라이브러리입니다. 이를 사용하여 JPA 어노테이션을 처리
            "javax.persistence:javax.persistence-api",

//  javax.annotation-api는 Java에서 사용되는 주요 어노테이션을 제공하는 라이브러리
            "javax.annotation:javax.annotation-api",

//  com.querydsl:querydsl-apt:${queryDslVersion}:jpa는 Querydsl의 JPA 모듈에 대한 Annotation Processor를 추가하는 부분입니다. 이를 통해 Querydsl의 Q타입 클래스를 생성할 수 있습니다. queryDslVersion 변수는 이전에 설정된 Querydsl 버전을 참조합니다.
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    )

    //ModelMapper
    implementation 'org.modelmapper:modelmapper:3.1.0'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

}

// JUnit 테스트 플랫폼을 사용
tasks.named('test') {
    useJUnitPlatform()
}


//sourceSets 블록은 프로젝트의 소스 코드와 관련된 디렉토리 구조를 정의하는 데 사용됩니다. 주로 프로젝트의 소스 코드, 리소스 및 테스트 코드의 위치를 지정하는 데 사용
//Gradle 프로젝트의 소스 세트를 정의하는 부분입니다. 소스 세트는 프로젝트의 소스 코드가 위치하는 디렉토리를 지정
sourceSets {
    main{
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
//main 소스 세트 내에서는 java 블록을 사용하여 Java 소스 코드를 포함하는 디렉토리를 지정합니다. 여기서는 프로젝트의 src/main/java 디렉토리와 build/generated 디렉토리를 Java 소스 코드가 위치하는 디렉토리로 설정
//이렇게 설정하면 Gradle이 소스 코드를 찾을 때 src/main/java 디렉토리뿐만 아니라 build/generated 디렉토리도 검색하여 소스 코드를 포함할 수 있습니다. 일반적으로는 빌드 과정에서 생성된 코드가 있는 디렉토리를 추가하여 해당 코드도 컴파일되도록 설정